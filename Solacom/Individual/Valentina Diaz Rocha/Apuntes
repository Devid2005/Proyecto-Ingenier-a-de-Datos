/* select campo2,campo3 from  tablanegra
where  columna2=(select columna 2x from otratabla where condicion;
*/

/*Consultar los datos de los empleados y su sueldo promedio*/
select nombreEmpleado,idEmpleado ,salario,(select avg(salario)
from empleado) as promedio
from empleado;
/* al empelado co un salario mayor al salario promedio 
Select nombreEmpleado,idEmpleado ,salario,SELECT MAX(Price) AS LargestPrice FROM Products; */

/* Consultar el area a la que pertenece un empleado */
select idEmpleado,nombreEmpleado,idArea,nombreArea
from empleado
where idArea in (select idArea from area where nombreEmpleado='Vale')


/*Una SELECT anidada es una consulta dentro de otra consulta, es decir, una consulta SELECT dentro de la SELECT principal.
 un ejemplo:
 La base de datos incluye tres tablas, students, teachers y classes
 SELECT *
FROM students
WHERE GPA > (
    SELECT AVG(GPA)
    FROM students);*/
    
    
    /* select campo2,campo3 from  tablanegra
where  columna2=(select columna 2x from otratabla where condicion;
*/

/*Consultar los datos de los empleados y su sueldo promedio*/
select nombreEmpleado,idEmpleado ,salario,(select avg(salario)
from empleado) as promedio
from empleado;
/* al empelado co un salario mayor al salario promedio 
Select nombreEmpleado,idEmpleado ,salario,SELECT MAX(Price) AS LargestPrice FROM Products; */

/* Consultar el area a la que pertenece un empleado */
select idEmpleado,nombreEmpleado,idArea,nombreArea
from empleado
where idArea in (select idArea from area where nombreEmpleado='Vale')



-- 1. Crear la base de datos y seleccionarla para su uso
CREATE DATABASE Mascotas;
USE Mascotas;

-- 2. Crear tablas para almacenar información sobre clientes, productos, mascotas y vacunas

-- Tabla para almacenar la información de los clientes
CREATE TABLE Cliente (
    cedulaCliente INT(11) AUTO_INCREMENT PRIMARY KEY,  -- Identificador único del cliente
    nombreCliente VARCHAR(15),  -- Nombre del cliente
    apellidoCliente VARCHAR(15),  -- Apellido del cliente
    direccionCliente VARCHAR(15),  -- Dirección del cliente
    telefono INT(10),  -- Número de teléfono del cliente
    idMascotaFK INT(11)  -- Referencia a la mascota del cliente (si aplica)
);

-- Tabla para almacenar la información de los productos
CREATE TABLE Producto (
    codigoProducto INT(11) AUTO_INCREMENT PRIMARY KEY,  -- Identificador único del producto
    nombreProducto VARCHAR(15),  -- Nombre del producto
    marca VARCHAR(15),  -- Marca del producto
    precio FLOAT,  -- Precio del producto
    cedulaClienteFK INT(11)  -- Referencia al cliente que compró el producto
);

-- Tabla para almacenar la información de las mascotas
CREATE TABLE Mascota (
    idMascota INT(11) AUTO_INCREMENT PRIMARY KEY,  -- Identificador único de la mascota
    nombreMascota VARCHAR(15),  -- Nombre de la mascota
    generoMascota VARCHAR(15),  -- Género de la mascota
    razaMascota VARCHAR(15),  -- Raza de la mascota
    cantidad INT(10)  -- Cantidad de mascotas (en caso de múltiples animales del mismo tipo)
);

-- Tabla para almacenar la información sobre las vacunas
CREATE TABLE Vacuna (
    CodigoVacuna INT(11) AUTO_INCREMENT PRIMARY KEY,  -- Identificador único de la vacuna
    nombreVacuna VARCHAR(15),  -- Nombre de la vacuna
    dosisVacuna INT(15),  -- Dosis de la vacuna
    enfermedad VARCHAR(15)  -- Enfermedad que previene la vacuna
);

-- Tabla para registrar qué vacunas ha recibido cada mascota
CREATE TABLE mascota_vacuna (
    CodigoVacunaFK INT(11),  -- Referencia a la vacuna recibida
    idMascotaFK INT(11),  -- Referencia a la mascota que recibió la vacuna
    enfermedad VARCHAR(15)  -- Enfermedad para la cual se administró la vacuna
);

-- 3. Crear relaciones entre las tablas utilizando claves foráneas

ALTER TABLE Cliente
ADD CONSTRAINT FKClienteMascota
FOREIGN KEY (idMascotaFK)
REFERENCES Mascota(idMascota);

ALTER TABLE Producto
ADD CONSTRAINT FKProductoCliente
FOREIGN KEY (cedulaClienteFK)
REFERENCES Cliente(cedulaCliente);

ALTER TABLE mascota_vacuna
ADD CONSTRAINT FKmascota_vacunaMascota
FOREIGN KEY (idMascotaFK)
REFERENCES Mascota(idMascota);

ALTER TABLE mascota_vacuna
ADD CONSTRAINT FKmascota_vacunaVacuna
FOREIGN KEY (CodigoVacunaFK)
REFERENCES Vacuna(CodigoVacuna);

-- 4. Agregar una nueva columna para la cantidad en la tabla Producto
ALTER TABLE Producto
ADD COLUMN cantidad INT(15) NOT NULL;

-- 5. Renombrar la columna 'cantidad' a 'cantidadMascota' en la tabla Mascota
ALTER TABLE Mascota
CHANGE COLUMN cantidad cantidadMascota INT(10);

-- 6. Renombrar la tabla 'mascota_vacuna' a 'detalleVacuna'
ALTER TABLE mascota_vacuna
RENAME TO detalleVacuna;






-- 1. Crear base de datos
CREATE DATABASE TIENDAONLINE;
USE TIENDAONLINE;

-- 2. Crear tablas

-- Tabla Cliente
CREATE TABLE Cliente (
    cedulaCliente INT(11) AUTO_INCREMENT PRIMARY KEY,
    nombreCliente VARCHAR(50),
    apellidoCliente VARCHAR(50),
    mes_nacimiento VARCHAR(15),
    direccion varchar(70),
    telefono int(15)
);

-- Tabla Producto
CREATE TABLE Producto (
    codigoProducto INT(11) AUTO_INCREMENT PRIMARY KEY,
    codigo_barras VARCHAR(30),
    precio FLOAT
);

-- Tabla Usuarios
CREATE TABLE Usuarios (
    idUsuario INT(11) AUTO_INCREMENT PRIMARY KEY,
    nombreUsuario VARCHAR(50),
    rol VARCHAR(15)
);

-- Tabla Ventas (Órdenes)
CREATE TABLE Ventas (
    numero_orden INT(11) AUTO_INCREMENT PRIMARY KEY,
    cantidad_productos INT(10),
    total FLOAT,
    idCliente INT(11),
    idUsuario INT(11),
    FOREIGN KEY (idCliente) REFERENCES Cliente(cedulaCliente),
    FOREIGN KEY (idUsuario) REFERENCES Usuarios(idUsuario)
);

-- Tabla Detalle_Venta (Relación muchos a muchos entre Ventas y Productos)
CREATE TABLE Detalle_Venta (
    idVenta INT(11),
    idProducto INT(11),
    cantidad INT(11),
    total FLOAT,
    PRIMARY KEY (idVenta, idProducto),
    FOREIGN KEY (idVenta) REFERENCES Ventas(numero_orden),
    FOREIGN KEY (idProducto) REFERENCES Producto(codigoProducto)
);

-- 4. Inserciones de ejemplo

-- Insertar productos
INSERT INTO Producto (codigo_barras, precio) 
VALUES ('1236547', 50000),('1236587', 25000),('7654569', 19000),('8765432', 15000),('9685324',60000);

-- Insertar usuarios
INSERT INTO Usuarios (nombreUsuario, rol) 
VALUES ('Ana Cardona', 'empleado'),('María Gómez', 'administrador'),('Andres Castano', 'empleado'),('Andrea Torres', 'cliente');
insert into Usuarios(nombreUsuario,rol)VALUES ('Valentina Diaz','administrador');
-- Insertar clientes
describe Cliente;
INSERT INTO Cliente (nombreCliente, apellidoCliente, mes_nacimiento,direccion,telefono) 
VALUES ('Mariana', 'Acosta', 'junio','Calle 41"34-9',3698574), ('Daniel', 'Maecha', 'marzo','Cll 104 #13-9',3589674),('Sara', 'Diaz', 'abril','Calle 112#4-6',39685741),('Juan Daniel', 'Moreno', 'enero','Calle 12 C #10-4',322698549);
Insert into Cliente (nombreCliente, apellidoCliente, mes_nacimiento,direccion,telefono) 
Values ('Tatina','Cabrera','agosto','Calle 170 #4-9',3144606918);
-- Insertar ventas
INSERT INTO Ventas (cantidad_productos, total, idCliente, idUsuario) 
VALUES (3, 165000, 1, 1), (1, 19000, 2, 2), (2, 75000, 3, 3), (4, 184000, 4, 4), (1,60000,5,5);

-- Insertar detalles de ventas (relacionando productos y ventas)
INSERT INTO Detalle_Venta (idVenta, idProducto, cantidad, total) 
VALUES (1, 1, 2, 100000), (1, 2, 1, 25000), (2, 3, 1, 19000), (3, 2, 2, 50000),(4, 4,1,60000);

-- 5. Consultas

-- a. Consulta general de todos los productos
SELECT * FROM Producto;

-- b. Ordenar productos por precio (menor a mayor)
SELECT * FROM Producto ORDER BY precio ASC;

-- c. Consultar los clientes que nacen en enero
SELECT * FROM Cliente WHERE mes_nacimiento = 'enero';

-- d. Consultar usuarios con el rol de empleado
SELECT * FROM Usuarios WHERE rol = 'empleado';

-- e. Consultar las órdenes generadas entre marzo y junio
SELECT * FROM Ventas WHERE idCliente IN (
    SELECT cedulaCliente FROM Cliente WHERE mes_nacimiento IN ('marzo', 'abril', 'mayo', 'junio')
);

-- f. Consultar productos que contengan la letra 'r'
SELECT * FROM Producto WHERE codigo_barras LIKE '%r%';

-- g. Consultar las ventas que tengan productos con precios entre 15,000 y 30,000
SELECT v.* 
FROM Ventas v
JOIN Detalle_Venta dv ON v.numero_orden = dv.idVenta
JOIN Producto p ON dv.idProducto = p.codigoProducto
WHERE p.precio BETWEEN 15000 AND 30000;

-- 6. Funciones agregadas

-- a. Promedio de ventas
SELECT AVG(total) AS promedio_venta FROM Ventas;

-- b. Total de ventas, cantidad de productos vendidos, y venta más económica
SELECT 
    COUNT(*) AS total_ventas,
    SUM(cantidad_productos) AS total_elementos_vendidos,
    MIN(total) AS venta_mas_economica 
FROM Ventas;

-- 7. INNER JOIN entre Ventas y Cliente
SELECT * 
FROM Ventas v
INNER JOIN Cliente c ON v.idCliente = c.cedulaCliente;

-- 8. Consultas adicionales

-- a. Consultar el cliente con la mayor venta
SELECT c.nombreCliente, c.apellidoCliente, MAX(v.total) AS mayor_venta
FROM Cliente c
JOIN Ventas v ON c.cedulaCliente = v.idCliente
GROUP BY c.cedulaCliente
ORDER BY mayor_venta DESC
LIMIT 1;

-- b. Consultar el usuario y la venta de una venta específica
SELECT u.nombreUsuario, v.numero_orden, v.total
FROM Usuarios u
JOIN Ventas v ON u.idUsuario = v.idUsuario
WHERE v.numero_orden = 1; -- Reemplazar '1' por el número de orden específico

-- c. Consultar los productos que compró un cliente específico
SELECT p.codigo_barras, p.precio, dv.cantidad
FROM Producto p
JOIN Detalle_Venta dv ON p.codigoProducto = dv.idProducto
JOIN Ventas v ON dv.idVenta = v.numero_orden
WHERE v.idCliente = 1; -- Reemplazar '1' por el ID del cliente específico

-- d. Consultar todos los clientes que han hecho compras (ventas u órdenes)
SELECT DISTINCT c.nombreCliente, c.apellidoCliente
FROM Cliente c
JOIN Ventas v ON c.cedulaCliente = v.idCliente;


-- e Hacer modificaciones con Update y Delete 
Describe Ventas;

insert into Cliente Values(53098693,'Tatiana','Cabrera','nombiembre','Calle 106 #34-63',317569842);
select *from Ventas;
update Ventas set idCliente = 53098693 where numero_orden = 5;
 
 delete from Clientes


-- Notas para el proyecto 
-- requisitos funcionales del proyecto (alto nivel) {abarcan otros requisitos crud} "create read update delete"
-- min 4 modulos (subsistemas)que son las clases (dependiendo el diagrama de clases) modulo de usuarios autenticacion y modulacion (must exist)
-- min hacer un requisito de consultas basicas y min 7 consultas especificas sobre el modulo (ejemplo cunsultar id) usando las sentencias vistas 
-- 40 requisitos funcionales en el proyecto 
-- cambiar diagrama de clases 
-- clase de 27 septiembre (modificacion\ eliminacion)
-- UPDATE tabla (condicion) y where ejemplo
-- UPDATE Mascota set generoMascota ='M'where idMascota=2
-- el lunes subconsultas 



-- 1
CREATE DATABASE TiendaOnline;
-- 2
use TiendaOnline;

-- 3
CREATE TABLE Producto(
codigoBarras INT(15) auto_increment PRIMARY KEY,
nombreProducto VARCHAR(15),
precioProducto float
);

CREATE TABLE Usuario(
idUsuario INT(11) PRIMARY KEY,
nombreUsuario VARCHAR(15),
emailUsuario VARCHAR(15),
rol VARCHAR(15),
telefonoUsuario INT(11)
);

CREATE TABLE Cliente(
idCliente INT(11) auto_increment PRIMARY KEY,
nombreCliente VARCHAR(15),
fechaNacimiento date
);

CREATE TABLE Ventas(
idVentas INT(11) auto_increment PRIMARY KEY,
fechaVenta VARCHAR(15),
idClienteFK INT(11),
idUsuarioFK INT(11)
);

CREATE TABLE Ventas_Producto(
codigoBarrasFK INT(11),
idVentasFK INT(11),
precioProductoFK int,
cantidad INT(11)
);

alter table Ventas
add constraint FKClienteVenta
foreign key (idClienteFK)
references Cliente(idCliente);

alter table Ventas
add constraint FKUsuarioVenta
foreign key (idUsuarioFK)
references Usuario(idUsuario);

alter table Ventas_Producto
add constraint FKVentas_Producto_Producto
foreign key (codigoBarrasFK)
references Producto(codigoBarras);

alter table Ventas_Producto
add constraint FKVentas_Producto_Venta
foreign key (idVentasFK)
references Ventas(idVentas);
 
describe Cliente;
insert into Cliente values(1,'Maria', '2008-19-12'),(2,'Sandra', '1979-04-24'), (3,'Omar', '1980-06-27'), (4,'Daniel', '2001-02-09');
update Cliente set fechaNacimiento = '2008-12-19' where idCliente = 1 ;
select * from Cliente;
describe Usuario;
insert into Usuario values(1,'Maria', 'Maria.1@gmail.com','Empleado',1234),(2,'Sandra', 'Sandra@hotmail.com','Empleado',9876), (3,'nikolas', 'nikolas@yahoo.com','Provedor',7654), (4,'Omar', 'Omar@gmail.com','Provedor',5489);
select * from Usuario;

describe Ventas;
insert into Ventas values(1,'03', 4,2),(2,'05', 4,4), (3,'07', 3,1), (4,'03', 2,3);
select * from Ventas;

describe Producto;
insert into Producto values(112,'Audifonos', 42.000),(113,'Labial', 14.300), (114,'Gamepass', 31.000), (115,'Reloj', 230.000);
select * from Producto;

describe Ventas_Producto;
insert into Ventas_Producto values(112,3,42.000,2),(113,2,14.300, 3), (114,1,31.000, 1), (115,2,230.000, 4);
select * from Ventas_Producto;

select * from Producto;
select * from Producto ORDER BY precioProducto ASC;
select * from Cliente where fechaNacimiento like '%09';
select * from Usuario where rol = 'Empleado';
select * from Ventas where fechaVenta between '03' and '04';
select * from Producto where nombreProducto like '%r%';
select * from Ventas;
select avg(idVentas) from Ventas;
select sum(idVentas) from Ventas;

use tiendaOnline;
describe Ventas_Producto;
describe Ventas;
select * from Ventas inner join Cliente on Ventas.idClienteFK = Cliente.idCliente;
-- consultar datos cliente de la maxima venta hecha
select Cliente.nombreCliente, Ventas.idClienteFK, Ventas_Producto.Cantidad, max(cantidad) from Ventas
inner join Cliente on Cliente.idCliente = Ventas.idClienteFK
inner join Ventas_Producto on Ventas.idVentas = Ventas_Producto.codigoBarrasFK;
-- consultar usuario y cliente de una venta especifica

describe Ventas;
SELECT V.idVentas, C.nombreCliente
FROM Ventas V
JOIN Cliente C ON V.idClienteFK = C.idCliente
JOIN Producto P ON V.idUsuarioFK = P.nombreProducto;
-- consultar los productos que compró un cliente especifico
-- consultar todos los clientes que han hecho ventas
describe Ventas_Producto;
select * from Usuario;
select * from Ventas;
select * from Cliente;
select * from Ventas_Producto;
select * from Producto;

alter table Cliente
add column apellido varchar(17);

alter table Ventas
add column codigoBarrasFK int;

alter table Ventas
add column numeroOrden int not null;

insert into Cliente values(5, 'Tatiana', 2000-06-06);
insert into Producto values(116, 'pañales',20000);
insert into Usuario values(5,'Daniel', 'daniel@gmail.com','empleado',9564);
insert into Ventas values(5,'27', 5,5);
describe Cliente;
update Ventas set codigoBarrasFK = 116 where idClienteFK = 5;
update Cliente set  apellido = 'Cabrera Vargas', fechaNacimiento = '1985-11-24' where idCliente = 5;
update Ventas set idVentas = 20240927 where idVentas = 5;
describe Ventas;
update Ventas set numeroOrden = 45528536 where idClienteFK = 5;
update Ventas set idVentas = 5 where idClienteFK = 5;
update ventas set numeroOrden = 20240927 where idClienteFK = 5;

insert into Cliente values(55163118, 'Tatiana','1985-11-24','Cabrera Vargas');
update Ventas set idClienteFK = 55163118 where idClienteFK = 5;
delete from Cliente where idCliente = 5;

DELIMITER //
CREATE PROCEDURE registrar_producto(codigodebarras int(15),nombreProducto varchar(15),precioProducto float (20))
BEGIN
INSERT INTO Producto Values(codigodebarras,nombreProducto,precioProducto);
END// 
DELIMITER ;

call registrar_producto('','CamisetaHOPE','150000');
SELECT *From Producto;

-- vistas son como las maquinas virtuales (sentencias que crean maquinas virtuales) se usan para hacer consultas complejas de 3 tablas

Create View  ConsultarCliente as 
select *from Cliente;


-- Notas para el proyecto 
-- requisitos funcionales del proyecto (alto nivel) {abarcan otros requisitos crud} "create read update delete"
-- min 4 modulos (subsistemas)que son las clases (dependiendo el diagrama de clases) modulo de usuarios autenticacion y modulacion (must exist)
-- min hacer un requisito de consultas basicas y min 7 consultas especificas sobre el modulo (ejemplo cunsultar id) usando las sentencias vistas 
-- 40 requisitos funcionales en el proyecto 
-- cambiar diagrama de clases 
-- clase de 27 septiembre (modificacion\ eliminacion)
-- UPDATE tabla (condicion) y where ejemplo
-- UPDATE Mascota set generoMascota ='M'where idMascota=2
-- el lunes subconsultas 



-- Clase 30 de septiembre procedimientos almacenados y subconsultas y vistas 
-- Tarea para el miercoles subconsultas ( de nuestra tienda online crear tres procedimientos para 
-- inactivar un cliente, consultar los productos que a comprado un cliente , para modificar la fecha de nacimiento de cliente )
-- crear dos vistas (consulte que cliente compro un producto y cual fue su numero de orden
-- (muestre el cliente que mas compras ha realizado) (hacer mas insert en compras)
-- Viernes simulacro de parcial practico 
